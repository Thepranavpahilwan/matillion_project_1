{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"adfadbplt001lssnfkpltdnaload": {
			"type": "string"
		},
		"adfadbplt001lssnfkpltdnacore": {
			"type": "string"
		},
		"adfadbplt001lsas3adpprd001": {
			"type": "string"
		},
		"adfadbplt001lsarsadpprd001": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PIPE_hist_data_migration_redshift_snowflake_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fetch Metadata",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "select * from META_RAW.HISTORICAL_OBJ_METADATA where ISACTIVE='TRUE' @{if(equals(pipeline().parameters.process_id,'ALL' ), '', concat(' and id in (',pipeline().parameters.process_id,')'))} Order By PRIORITY DESC;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Fetch Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Fetch Metadata').output.resultSets[0].rows",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "Execute Child Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PIPE_hist_data_migration_redshift_snowflake_child",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"Source_Schema": {
												"value": "@item().SOURCE_SCHEMA",
												"type": "Expression"
											},
											"Source_Table": {
												"value": "@item().SOURCE_TABLE",
												"type": "Expression"
											},
											"Target_Schema": {
												"value": "@item().TARGET_SCHEMA",
												"type": "Expression"
											},
											"Target_Table": {
												"value": "@item().TARGET_TABLE",
												"type": "Expression"
											},
											"IsActive": {
												"value": "@item().ISACTIVE",
												"type": "Expression"
											},
											"Market": {
												"value": "@item().MARKET",
												"type": "Expression"
											},
											"type_of_load": {
												"value": "@item().TYPE_OF_LOAD",
												"type": "Expression"
											},
											"Id": {
												"value": "@item().ID",
												"type": "Expression"
											},
											"Target_DB": {
												"value": "@item().TARGET_DB",
												"type": "Expression"
											},
											"Stage_Schema": {
												"value": "@item().STAGE_SCHEMA",
												"type": "Expression"
											},
											"Environment": {
												"value": "@pipeline().parameters.Environment",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Environment": {
						"type": "string",
						"defaultValue": "DEV"
					},
					"process_id": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"redshift_unload_query": {
						"type": "String"
					},
					"snowflakeQuery": {
						"type": "String"
					},
					"test": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Historical_Data_migration_redshift_snowflake"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PIPE_hist_data_migration_redshift_snowflake_child')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIPE_hist_data_migration_redshift_snowflake_child')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If table is transactional or full refresh",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.type_of_load",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "TRANSACTIONAL",
									"activities": [
										{
											"name": "Unload_Redshift To S3_Transactional_Query",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "redshift_unload_query",
												"value": {
													"value": "@concat('set autocommit=on; unload ($$ select * from ', pipeline().parameters.Source_Schema,'.',pipeline().parameters.Source_Table,\n'$$ ) to ''s3://itx-arm-snowflake-external-stage/',pipeline().parameters.Target_DB,'/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table,'/'' iam_role ''arn:aws:iam::580538643236:role/project/scm/itx-arm-app-dremioserver-developmentRole-1O5G0LI8M5O4H'' HEADER DELIMITER as ''\\001'' null ''\\\\N'' escape GZIP CLEANPATH PARALLEL TRUE MAXFILESIZE as 256 MB REGION as ''ap-southeast-1'' ;')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Snowflake_Transactional_Query",
											"description": "",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "truncate query transactional",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "snowflakeQuery",
												"value": {
													"value": "@concat('COPY INTO ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,\n' FROM ''', pipeline().parameters.Stage_Schema, '.',pipeline().parameters.Environment,'_CORE_STAGE_S3/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table, '/''',\n' FILE_FORMAT = ''',pipeline().parameters.Stage_Schema, '.',pipeline().parameters.Environment,'_CORE_CSV_FILEFORMAT'' ',\n';')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "truncate query transactional",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Unload_Redshift To S3_Transactional_Query",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "truncateQuery",
												"value": {
													"value": "@concat('truncate table ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';')\n",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Unload_Redshift To S3_Full_Refresh_Query",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "redshift_unload_query",
										"value": {
											"value": "@concat('set autocommit=on; unload ($$ select * from ', pipeline().parameters.Source_Schema,'.',pipeline().parameters.Source_Table,\n'$$ ) to ''s3://itx-arm-snowflake-external-stage/',pipeline().parameters.Target_DB,'/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table,'/'' iam_role ''arn:aws:iam::580538643236:role/project/scm/itx-arm-app-dremioserver-developmentRole-1O5G0LI8M5O4H'' HEADER DELIMITER as ''\\001'' null ''\\\\N'' escape GZIP CLEANPATH PARALLEL TRUE MAXFILESIZE as 256 MB REGION as ''ap-southeast-1'' ;')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Snowflake_Full_Refresh_Query",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "truncate query full refresh",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "snowflakeQuery",
										"value": {
											"value": "@concat('COPY INTO ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,\n' FROM ''@', pipeline().parameters.Stage_Schema, '.',pipeline().parameters.Environment,'_CORE_STAGE_S3/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table, '/''',\n' FILE_FORMAT = ''',pipeline().parameters.Stage_Schema, '.',pipeline().parameters.Environment,'_CORE_CSV_FILEFORMAT'' ',\n';')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "truncate query full refresh",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Unload_Redshift To S3_Full_Refresh_Query",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "truncateQuery",
										"value": {
											"value": "@concat('truncate table ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';')\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If target is DNA_LOAD or DNA_CORE",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Select count from redshift",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(contains(pipeline().parameters.Target_DB,'DNA_LOAD'),'DNA_LOAD','DNA_CORE')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "DNA_LOAD",
									"activities": [
										{
											"name": "Load to Snowflake Dna Load",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Truncate Snowflake Dna Load",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "USE WAREHOUSE @{pipeline().parameters.Environment}_DNA_LOAD_APP2_WH; @{variables('snowflakeQuery')}",
															"type": "Expression"
														}
													}
												]
											}
										},
										{
											"name": "Select count from snowflake dna load",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Load to Snowflake Dna Load",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('Select count(*) as count from ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Insert Status in Metadata as Completed DNA LOAD",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Select count from snowflake dna load",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP, SOURCE_COUNT, TARGET_COUNT) VALUES (',string(pipeline().parameters.Id),', ''Completed'',''SUCCESS'',''',pipeline().RunId, ''',current_timestamp, ', activity('Select count from redshift').output.value[0].count,', ',activity('Select count from snowflake dna load').output.resultSets[0].rows[0].count,'); ')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Insert Status in Metadata as Error_Sf_copy1",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Load to Snowflake Dna Load",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error SF'',''',replace(activity('Load to Snowflake Dna Load')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')\n",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Truncate Snowflake Dna Load",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@variables('truncateQuery')",
															"type": "Expression"
														}
													}
												]
											}
										},
										{
											"name": "Insert Status in Metadata as Error_SfTruncate",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Truncate Snowflake Dna Load",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error SF'',''',replace(activity('Truncate Snowflake Dna Load')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Fail Pipeline 1",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Insert Status in Metadata as Error_Sf_copy1",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": "Error while loading data",
												"errorCode": "1001"
											}
										}
									]
								},
								{
									"value": "DNA_CORE",
									"activities": [
										{
											"name": "Load to Snowflake Dna Core",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Truncate Snowflake Dna Core",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "USE WAREHOUSE @{pipeline().parameters.Environment}_DNA_CORE_APP2_WH;\n@{variables('snowflakeQuery')}",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Select count from snowflake dna Core",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Load to Snowflake Dna Core",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('Select count(*) as count from ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Insert Status in Metadata as Completed DNA CORE",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Select count from snowflake dna Core",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP, SOURCE_COUNT, TARGET_COUNT) VALUES (',string(pipeline().parameters.Id),', ''Completed'',''SUCCESS'',''',pipeline().RunId, ''',current_timestamp, ', activity('Select count from redshift').output.value[0].count,', ',activity('Select count from snowflake dna Core').output.resultSets[0].rows[0].count,'); ')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Insert Status in Metadata as Error SF DNA CORE",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Load to Snowflake Dna Core",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error SF'',''',replace(activity('Load to Snowflake Dna Core')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')\n",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Truncate Snowflake Dna Core",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnacore')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@variables('truncateQuery')",
															"type": "Expression"
														}
													}
												]
											}
										},
										{
											"name": "Insert Status in Metadata as Error SF_Truncate",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Truncate Snowflake Dna Core",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload')]",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error SF'',''',replace(activity('Truncate Snowflake Dna Core')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')",
															"type": "Expression"
														}
													}
												],
												"scriptBlockExecutionTimeout": "02:00:00"
											}
										},
										{
											"name": "Fail Pipeline 2",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "Insert Status in Metadata as Error SF DNA CORE",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": "Error while loading data",
												"errorCode": "1001"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Fail Invalid Database Name",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Fail Invalid Database Name",
										"errorCode": "0000"
									}
								}
							]
						}
					},
					{
						"name": "Unload from Redshift",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If table is transactional or full refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AmazonRedshiftSource",
								"query": {
									"value": "@variables('redshift_unload_query')",
									"type": "Expression"
								},
								"redshiftUnloadSettings": {
									"s3LinkedServiceName": {
										"referenceName": "[parameters('adfadbplt001lsas3adpprd001')]",
										"type": "LinkedServiceReference"
									},
									"bucketName": "itx-arm-snowflake-external-stage"
								}
							},
							"dataset": {
								"referenceName": "AmazonRedshiftTable1",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Select count from redshift",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Unload from Redshift",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AmazonRedshiftSource",
								"query": {
									"value": "@concat('Select count(*) from ', pipeline().parameters.Source_Schema,'.',pipeline().parameters.Source_Table)",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "AmazonRedshiftTable1",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Insert Status in Metadata as Error_Rd",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Unload from Redshift",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('adfadbplt001lssnfkpltdnaload')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error RD'',''',replace(activity('Unload from Redshift')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"parameters": {
					"Source_Schema": {
						"type": "string",
						"defaultValue": "RG_SDL"
					},
					"Source_Table": {
						"type": "string",
						"defaultValue": "SDL_SAP_ECC_SALES_ORG"
					},
					"Target_Schema": {
						"type": "string",
						"defaultValue": "SNAPASPSDL_RAW"
					},
					"Target_Table": {
						"type": "string",
						"defaultValue": "SDL_SAP_ECC_SALES_ORG"
					},
					"IsActive": {
						"type": "bool",
						"defaultValue": true
					},
					"Market": {
						"type": "string",
						"defaultValue": "Regional"
					},
					"type_of_load": {
						"type": "string",
						"defaultValue": "FULL_REFRESH"
					},
					"Id": {
						"type": "int",
						"defaultValue": 34
					},
					"Target_DB": {
						"type": "string",
						"defaultValue": "DEV_DNA_LOAD"
					},
					"Stage_Schema": {
						"type": "string",
						"defaultValue": "SNAPASPSDL_RAW"
					},
					"Environment": {
						"type": "string",
						"defaultValue": "DEV"
					}
				},
				"variables": {
					"redshift_unload_query": {
						"type": "String"
					},
					"snowflakeQuery": {
						"type": "String"
					},
					"countQueryRedshift": {
						"type": "String"
					},
					"countQuerySnowflake": {
						"type": "String"
					},
					"target_count": {
						"type": "Integer"
					},
					"test": {
						"type": "String"
					},
					"truncateQuery": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Historical_Data_migration_redshift_snowflake"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AmazonRedshiftTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AmazonRedshiftTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('adfadbplt001lsarsadpprd001')]",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Historical_Data_migration_redshift_snowflake"
				},
				"annotations": [],
				"type": "AmazonRedshiftTable",
				"schema": []
			},
			"dependsOn": []
		}
	]
}